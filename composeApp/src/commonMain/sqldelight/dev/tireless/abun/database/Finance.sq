-- Accounts Table (Chart of Accounts)
-- Hierarchy-based: 5 root accounts with FIXED IDs
-- All other accounts are descendants of these 5 roots
-- Account type is determined by traversing parent_id to the root
-- Initial balance is recorded as equity transaction, current balance calculated on-demand
-- IMPORTANT: All amounts are stored as INTEGER (actual value * 10000) to avoid floating point precision loss
CREATE TABLE Account (
    id INTEGER PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    parent_id INTEGER, -- NULL for root accounts, or FK to parent account
    currency TEXT NOT NULL DEFAULT 'CNY',
    config INTEGER NOT NULL DEFAULT 7, -- Bitwise: bit0=active, bit1=countable, bit2=visible
    icon_name TEXT,
    color_hex TEXT,
    bill_date INTEGER CHECK (bill_date IS NULL OR (bill_date >= 1 AND bill_date <= 28)), -- Day of month 1-28 (compatible with Feb)
    payment_date INTEGER CHECK (payment_date IS NULL OR (payment_date >= 1 AND payment_date <= 28)), -- Day of month 1-28
    credit_limit INTEGER NOT NULL DEFAULT -1, -- Credit limit * 10000, -1 for non-liability accounts
    created_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
    updated_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
    FOREIGN KEY (parent_id) REFERENCES Account(id) ON DELETE SET NULL
);
-- =============================================================================
-- SQL for Initializing the Chart of Accounts
-- App: "Abundance"
-- ID Strategy: Hierarchical Primary Keys (User Directed)
-- =============================================================================

-- ----------------------------
-- 5 Fundamental Root Accounts
-- ----------------------------
INSERT INTO Account (id, name, parent_id, color_hex) VALUES
(1, 'Asset', NULL, '#2196F3'),      -- ðŸ”µ Blue for Assets
(2, 'Liability', NULL, '#FF9800'),  -- ðŸŸ  Orange for Liabilities
(3, 'Equity', NULL, '#9C27B0'),     -- ðŸŸ£ Purple for Equity
(4, 'Revenue', NULL, '#4CAF50'),    -- ðŸŸ¢ Green for Revenue
(5, 'Expense', NULL, '#F44336');    -- ðŸ”´ Red for Expenses

-- ----------------------------
-- ASSET ACCOUNTS (parent_id: 1)
-- ----------------------------
INSERT INTO Account (id, name, parent_id, color_hex) VALUES
(101, 'Cash', 1, '#64B5F6'),
(102, 'Checking Accounts', 1, '#42A5F5'),
(103, 'E-Wallets', 1, '#90CAF9'),
(104, 'Growth', 1, '#1E88E5'),
(105, 'Lending', 1, '#1976D2'),
(106, 'Fixed Assets', 1, '#0D47A1');
INSERT INTO Account (id, name, parent_id, color_hex) VALUES
(107, 'Deposits', 1, '#1565C0'),
(108, 'Reimbursables', 1, '#0288D1');
-- -------------------------------
-- LIABILITY ACCOUNTS (parent_id: 2)
-- -------------------------------
INSERT INTO Account (id, name, parent_id, color_hex) VALUES
(201, 'Credit Cards', 2, '#FB8C00'),
(202, 'Loans', 2, '#F57C00'),
(203, 'Borrowing', 2, '#EF6C00');

-- ----------------------------
-- EQUITY ACCOUNTS (parent_id: 3)
-- ----------------------------
INSERT INTO Account (id, name, parent_id, color_hex) VALUES
(301, 'Open Balance', 3, '#BA68C8'),
(302, 'Capital Contributions', 3, '#AB47BC'),
(303, 'Capital Losses', 3, '#9C27B0'),
(304, 'Adjustments', 3, '#8E24AA'),
(305, 'Retained Earnings', 3, '#7B1FA2');

-- -----------------------------
-- REVENUE ACCOUNTS (parent_id: 4)
-- -----------------------------
-- Level 2 Categories
INSERT INTO Account (id, name, parent_id, color_hex) VALUES
(401, 'Active', 4, '#66BB6A'),
(402, 'Passive', 4, '#388E3C'),
(403, 'Others', 4, '#A5D6A7');
-- Level 3 under Active (401)
INSERT INTO Account (id, name, parent_id, color_hex) VALUES
(40101, 'Salary', 401, '#81C784'),
(40102, 'Bonus', 401, '#81C784'),
(40103, 'Side Hustle', 401, '#81C784');
-- Level 3 under Passive (402)
INSERT INTO Account (id, name, parent_id, color_hex) VALUES
(40201, 'Interest', 402, '#43A047'),
(40202, 'Dividends', 402, '#43A047'),
(40203, 'Capital Gains', 402, '#43A047'),
(40204, 'Royalties & Rent', 402, '#43A047');
-- Level 3 under Others (403)
INSERT INTO Account (id, name, parent_id, color_hex) VALUES
(40301, 'Red Packets', 403, '#C8E6C9'),
(40302, 'Second-hand Sales', 403, '#C8E6C9'),
(40303, 'Windfall', 403, '#C8E6C9');

-- -----------------------------
-- EXPENSE ACCOUNTS (parent_id: 5)
-- -----------------------------
-- Level 2 Categories
INSERT INTO Account (id, name, parent_id, color_hex) VALUES
(501, 'Essential', 5, '#EF5350'),
(502, 'Lifestyle', 5, '#E53935'),
(503, 'Growth & Creation', 5, '#C62828'),
(504, 'Financial Costs', 5, '#B71C1C'),
(505, 'Uncategorized', 5, '#D32F2F');

-- Level 3 under Essential (501)
INSERT INTO Account (id, name, parent_id, color_hex) VALUES
(50101, 'Housing', 501, '#FFCDD2'),
(50102, 'Utilities', 501, '#FFCDD2'),
(50103, 'Groceries', 501, '#FFCDD2'),
(50104, 'Household', 501, '#FFCDD2'),
(50105, 'Transportation', 501, '#FFCDD2'),
(50106, 'Communication', 501, '#FFCDD2'),
(50107, 'Basic Apparel', 501, '#FFCDD2'),
(50108, 'Personal Care', 501, '#FFCDD2'),
(50109, 'Healthcare', 501, '#FFCDD2'),
(50110, 'Insurance', 501, '#FFCDD2'),
(50111, 'Family Support', 501, '#FFCDD2'),
(50112, 'Pet Care', 501, '#FFCDD2'),
(50113, 'Administrative & Legal', 501, '#FFCDD2');

-- Level 3 under Lifestyle (502)
INSERT INTO Account (id, name, parent_id, color_hex) VALUES
(50201, 'Dining & Social', 502, '#EF9A9A'),
(50202, 'Fashion & Accessories', 502, '#EF9A9A'),
(50203, 'Electronics & Gadgets', 502, '#EF9A9A'),
(50204, 'Home & Decor', 502, '#EF9A9A'),
(50205, 'Entertainment & Hobbies', 502, '#EF9A9A'),
(50206, 'Travel & Vacation', 502, '#EF9A9A'),
(50207, 'Gifting & Donations', 502, '#EF9A9A');

-- Level 3 under Growth & Creation (503)
INSERT INTO Account (id, name, parent_id, color_hex) VALUES
(50301, 'Self-Development', 503, '#E57373'),
(50302, 'Side Hustle Costs', 503, '#E57373');

-- Level 3 under Financial Costs (504)
INSERT INTO Account (id, name, parent_id, color_hex) VALUES
(50401, 'Interest Paid', 504, '#D32F2F'),
(50402, 'Fees & Charges', 504, '#D32F2F'),
(50403, 'Taxes', 504, '#D32F2F');

-- Transaction Groups Table (Pure virtual grouping for related transactions)
-- This is a logical grouping mechanism without financial meaning
-- Aggregate amounts and status should be calculated from member transactions
CREATE TABLE TransactionGroup (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    name TEXT NOT NULL,
    group_type TEXT NOT NULL, -- 'loan', 'installment', 'split', 'custom'
    description TEXT,
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL
);

-- Transactions Table (Pure Double-Entry Booking)
-- IMPORTANT: All amounts are stored as INTEGER (actual value * 10000) to avoid floating point precision loss
CREATE TABLE `Transaction` (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    amount INTEGER NOT NULL, -- Always positive, actual amount * 10000 (supports up to .4f precision)
    debit_account_id INTEGER NOT NULL, -- Account being debited
    credit_account_id INTEGER NOT NULL, -- Account being credited
    transaction_date INTEGER NOT NULL, -- Timestamp in milliseconds
    transfer_group_id TEXT, -- UUID to link transfer pairs (for UI grouping)
    payee TEXT, -- Merchant/Source name
    member TEXT, -- Who this expense is for
    notes TEXT,
    state TEXT NOT NULL DEFAULT 'confirmed', -- 'planned', 'estimated', 'confirmed'
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL,
    FOREIGN KEY (debit_account_id) REFERENCES Account(id) ON DELETE CASCADE,
    FOREIGN KEY (credit_account_id) REFERENCES Account(id) ON DELETE CASCADE
);

-- Transaction Group Membership (Many-to-Many)
CREATE TABLE TransactionGroupMember (
    transaction_id INTEGER NOT NULL,
    group_id INTEGER NOT NULL,
    PRIMARY KEY (transaction_id, group_id),
    FOREIGN KEY (transaction_id) REFERENCES `Transaction`(id) ON DELETE CASCADE,
    FOREIGN KEY (group_id) REFERENCES TransactionGroup(id) ON DELETE CASCADE
);

-- Note: Transaction Templates and Recurring Transactions removed temporarily
-- Will be re-implemented after full migration to debit/credit model

-- Queries for Accounts
insertAccount:
INSERT INTO Account (name, parent_id, currency, config, icon_name, color_hex, bill_date, payment_date, credit_limit, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateAccount:
UPDATE Account
SET name = ?, parent_id = ?, currency = ?, config = ?, icon_name = ?, color_hex = ?, bill_date = ?, payment_date = ?, credit_limit = ?, updated_at = ?
WHERE id = ?;

deleteAccount:
DELETE FROM Account WHERE id = ? AND id > 5;  -- Prevent deletion of root accounts

getAccountById:
SELECT * FROM Account WHERE id = ?;

getAllAccounts:
SELECT * FROM Account ORDER BY (config & 1) DESC, created_at DESC;  -- bit0 = active

getActiveAccounts:
SELECT * FROM Account WHERE (config & 1) = 1 ORDER BY created_at DESC;  -- bit0 = active

-- Get all expense categories (sub-accounts of Expense root, id=5)
getExpenseCategories:
SELECT * FROM Account WHERE parent_id = 5 AND (config & 1) = 1 ORDER BY name;

-- Get all revenue categories (sub-accounts of Revenue root, id=4)
getRevenueCategories:
SELECT * FROM Account WHERE parent_id = 4 AND (config & 1) = 1 ORDER BY name;

-- Get all asset accounts (sub-accounts of Asset root, id=1)
getAssetAccounts:
SELECT * FROM Account WHERE parent_id = 1 AND (config & 1) = 1 ORDER BY name;

-- Get all liability accounts (sub-accounts of Liability root, id=2)
getLiabilityAccounts:
SELECT * FROM Account WHERE parent_id = 2 AND (config & 1) = 1 ORDER BY name;

-- Queries for Transaction Groups
insertTransactionGroup:
INSERT INTO TransactionGroup (name, group_type, description, created_at, updated_at)
VALUES (?, ?, ?, ?, ?);

updateTransactionGroup:
UPDATE TransactionGroup
SET name = ?, description = ?, updated_at = ?
WHERE id = ?;

deleteTransactionGroup:
DELETE FROM TransactionGroup WHERE id = ?;

getTransactionGroupById:
SELECT * FROM TransactionGroup WHERE id = ?;

getAllTransactionGroups:
SELECT * FROM TransactionGroup ORDER BY created_at DESC;

getTransactionGroupsByType:
SELECT * FROM TransactionGroup WHERE group_type = ? ORDER BY created_at DESC;

-- Queries for Transaction Group Membership
addTransactionToGroup:
INSERT OR IGNORE INTO TransactionGroupMember (transaction_id, group_id) VALUES (?, ?);

removeTransactionFromGroup:
DELETE FROM TransactionGroupMember WHERE transaction_id = ? AND group_id = ?;

getGroupsForTransaction:
SELECT g.* FROM TransactionGroup g
INNER JOIN TransactionGroupMember m ON g.id = m.group_id
WHERE m.transaction_id = ?
ORDER BY g.created_at;

getTransactionsByGroup:
SELECT t.* FROM `Transaction` t
INNER JOIN TransactionGroupMember m ON t.id = m.transaction_id
WHERE m.group_id = ?
ORDER BY t.transaction_date;

-- Queries for Transactions
insertTransaction:
INSERT INTO `Transaction` (amount, debit_account_id, credit_account_id, transaction_date, transfer_group_id, payee, member, notes, state, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateTransaction:
UPDATE `Transaction`
SET amount = ?, debit_account_id = ?, credit_account_id = ?, transaction_date = ?, transfer_group_id = ?, payee = ?, member = ?, notes = ?, state = ?, updated_at = ?
WHERE id = ?;

deleteTransaction:
DELETE FROM `Transaction` WHERE id = ?;

getTransactionById:
SELECT * FROM `Transaction` WHERE id = ?;

getAllTransactions:
SELECT * FROM `Transaction` ORDER BY transaction_date DESC, created_at DESC;

getTransactionsByAccount:
SELECT * FROM `Transaction`
WHERE debit_account_id = ? OR credit_account_id = ?
ORDER BY transaction_date DESC;

getTransactionsByDateRange:
SELECT * FROM `Transaction`
WHERE transaction_date BETWEEN ? AND ?
ORDER BY transaction_date DESC;

getTransferPair:
SELECT * FROM `Transaction` WHERE transfer_group_id = ? ORDER BY created_at;

getPlannedTransactions:
SELECT * FROM `Transaction` WHERE state = 'planned' ORDER BY transaction_date;

getEstimatedTransactions:
SELECT * FROM `Transaction` WHERE state = 'estimated' ORDER BY transaction_date;

getTransactionsByState:
SELECT * FROM `Transaction` WHERE state = ? ORDER BY transaction_date;

updateTransactionState:
UPDATE `Transaction` SET state = ?, updated_at = ? WHERE id = ?;

-- Note: Template and recurring transaction queries removed
-- Will be re-implemented after full migration to debit/credit model

-- Analytics Queries
-- Calculate account balance by summing all transaction debits minus credits
-- Returns INTEGER (amount * 10000)
calculateAccountBalance:
SELECT
  COALESCE(
    (
      SELECT SUM(amount)
      FROM `Transaction`
      WHERE debit_account_id = :accountId
        AND transaction_date <= :asOfDate
        AND state = 'confirmed'
    ),
    0
  ) -
  COALESCE(
    (
      SELECT SUM(amount)
      FROM `Transaction`
      WHERE credit_account_id = :accountId
        AND transaction_date <= :asOfDate
        AND state = 'confirmed'
    ),
    0
  ) AS balance;

getRecentPayees:
SELECT DISTINCT payee FROM `Transaction`
WHERE payee IS NOT NULL AND payee != ''
ORDER BY transaction_date DESC
LIMIT 20;
