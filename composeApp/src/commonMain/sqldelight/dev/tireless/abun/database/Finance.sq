-- Accounts Table (Chart of Accounts)
-- Hierarchy-based: 5 root accounts with FIXED IDs
-- All other accounts are descendants of these 5 roots
-- Account type is determined by traversing parent_id to the root
CREATE TABLE Account (
    id INTEGER PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    parent_id INTEGER, -- NULL for root accounts, or FK to parent account
    initial_balance REAL NOT NULL DEFAULT 0.0,
    current_balance REAL NOT NULL DEFAULT 0.0,
    currency TEXT NOT NULL DEFAULT 'CNY',
    is_active INTEGER NOT NULL DEFAULT 1, -- Boolean
    is_visible_in_ui INTEGER NOT NULL DEFAULT 1, -- Hide root accounts from users
    icon_name TEXT,
    color_hex TEXT,
    bill_date INTEGER, -- Day of month for credit card billing (1-31), NULL for non-credit accounts
    payment_date INTEGER, -- Day of month for payment due (1-31), NULL for non-credit/debt accounts
    credit_limit REAL, -- Credit limit for credit cards
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL,
    FOREIGN KEY (parent_id) REFERENCES Account(id) ON DELETE SET NULL
);

-- Initialize 5 fundamental accounts with fixed IDs (must match RootAccountIds constants)
INSERT INTO Account (id, name, parent_id, initial_balance, current_balance, currency, is_active, is_visible_in_ui, created_at, updated_at)
VALUES
  (1, 'Asset', NULL, 0.0, 0.0, 'CNY', 1, 0, 0, 0),      -- RootAccountIds.ASSET
  (2, 'Liability', NULL, 0.0, 0.0, 'CNY', 1, 0, 0, 0),  -- RootAccountIds.LIABILITY
  (3, 'Equity', NULL, 0.0, 0.0, 'CNY', 1, 0, 0, 0),     -- RootAccountIds.EQUITY
  (4, 'Revenue', NULL, 0.0, 0.0, 'CNY', 1, 0, 0, 0),    -- RootAccountIds.REVENUE
  (5, 'Expense', NULL, 0.0, 0.0, 'CNY', 1, 0, 0, 0);    -- RootAccountIds.EXPENSE

-- Finance Categories Table (separate from time categories)
CREATE TABLE FinanceCategory (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    name TEXT NOT NULL,
    parent_id INTEGER, -- NULL for top-level categories
    type TEXT NOT NULL, -- 'expense', 'income'
    icon_name TEXT,
    color_hex TEXT,
    is_system INTEGER NOT NULL DEFAULT 0, -- System predefined categories
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL,
    FOREIGN KEY (parent_id) REFERENCES FinanceCategory(id) ON DELETE CASCADE
);

-- Transaction Groups Table (for grouping related transactions like loans)
CREATE TABLE TransactionGroup (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    name TEXT NOT NULL,
    group_type TEXT NOT NULL, -- 'loan', 'installment', 'split', 'custom'
    description TEXT,
    total_amount REAL,
    status TEXT NOT NULL DEFAULT 'active', -- 'active', 'completed', 'cancelled'
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL
);

-- Transactions Table (Pure Double-Entry Booking)
CREATE TABLE `Transaction` (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    amount REAL NOT NULL, -- Always positive
    debit_account_id INTEGER NOT NULL, -- Account being debited
    credit_account_id INTEGER NOT NULL, -- Account being credited
    transaction_date INTEGER NOT NULL, -- Timestamp in milliseconds
    transfer_group_id TEXT, -- UUID to link transfer pairs (for UI grouping)
    category_id INTEGER, -- User-facing category (for display only, maps to expense/revenue accounts)
    payee TEXT, -- Merchant/Source name
    member TEXT, -- Who this expense is for
    notes TEXT,
    state TEXT NOT NULL DEFAULT 'confirmed', -- 'planned', 'estimated', 'confirmed'
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL,
    FOREIGN KEY (debit_account_id) REFERENCES Account(id) ON DELETE CASCADE,
    FOREIGN KEY (credit_account_id) REFERENCES Account(id) ON DELETE CASCADE,
    FOREIGN KEY (category_id) REFERENCES FinanceCategory(id) ON DELETE SET NULL
);

-- Transaction Group Membership (Many-to-Many)
CREATE TABLE TransactionGroupMember (
    transaction_id INTEGER NOT NULL,
    group_id INTEGER NOT NULL,
    PRIMARY KEY (transaction_id, group_id),
    FOREIGN KEY (transaction_id) REFERENCES `Transaction`(id) ON DELETE CASCADE,
    FOREIGN KEY (group_id) REFERENCES TransactionGroup(id) ON DELETE CASCADE
);

-- Tags Table
CREATE TABLE FinanceTag (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    name TEXT NOT NULL UNIQUE,
    color_hex TEXT,
    created_at INTEGER NOT NULL
);

-- Transaction-Tag Association Table (Many-to-Many)
CREATE TABLE TransactionTag (
    transaction_id INTEGER NOT NULL,
    tag_id INTEGER NOT NULL,
    PRIMARY KEY (transaction_id, tag_id),
    FOREIGN KEY (transaction_id) REFERENCES `Transaction`(id) ON DELETE CASCADE,
    FOREIGN KEY (tag_id) REFERENCES FinanceTag(id) ON DELETE CASCADE
);

-- Attachments Table
CREATE TABLE TransactionAttachment (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    transaction_id INTEGER NOT NULL,
    file_path TEXT NOT NULL,
    file_type TEXT NOT NULL, -- 'image', 'pdf', etc.
    created_at INTEGER NOT NULL,
    FOREIGN KEY (transaction_id) REFERENCES `Transaction`(id) ON DELETE CASCADE
);

-- Linked Items Table (Cross-module linking)
CREATE TABLE TransactionLinkedItem (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    transaction_id INTEGER NOT NULL,
    linked_item_id INTEGER NOT NULL,
    linked_item_type TEXT NOT NULL, -- 'note', 'task', 'timeblock', 'event', etc.
    created_at INTEGER NOT NULL,
    FOREIGN KEY (transaction_id) REFERENCES `Transaction`(id) ON DELETE CASCADE
);

-- Note: Transaction Templates and Recurring Transactions removed temporarily
-- Will be re-implemented after full migration to debit/credit model

-- Queries for Accounts
insertAccount:
INSERT INTO Account (name, parent_id, initial_balance, current_balance, currency, is_active, is_visible_in_ui, icon_name, color_hex, bill_date, payment_date, credit_limit, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateAccount:
UPDATE Account
SET name = ?, parent_id = ?, initial_balance = ?, current_balance = ?, currency = ?, is_active = ?, is_visible_in_ui = ?, icon_name = ?, color_hex = ?, bill_date = ?, payment_date = ?, credit_limit = ?, updated_at = ?
WHERE id = ?;

updateAccountBalance:
UPDATE Account
SET current_balance = ?, updated_at = ?
WHERE id = ?;

deleteAccount:
DELETE FROM Account WHERE id = ? AND id > 5;  -- Prevent deletion of root accounts

getAccountById:
SELECT * FROM Account WHERE id = ?;

getAllAccounts:
SELECT * FROM Account ORDER BY is_active DESC, created_at DESC;

getActiveAccounts:
SELECT * FROM Account WHERE is_active = 1 ORDER BY created_at DESC;

-- Get all expense categories (sub-accounts of Expense root, id=5)
getExpenseCategories:
SELECT * FROM Account WHERE parent_id = 5 AND is_active = 1 ORDER BY name;

-- Get all revenue categories (sub-accounts of Revenue root, id=4)
getRevenueCategories:
SELECT * FROM Account WHERE parent_id = 4 AND is_active = 1 ORDER BY name;

-- Get all asset accounts (sub-accounts of Asset root, id=1)
getAssetAccounts:
SELECT * FROM Account WHERE parent_id = 1 AND is_active = 1 ORDER BY name;

-- Get all liability accounts (sub-accounts of Liability root, id=2)
getLiabilityAccounts:
SELECT * FROM Account WHERE parent_id = 2 AND is_active = 1 ORDER BY name;

-- Queries for Finance Categories
insertFinanceCategory:
INSERT INTO FinanceCategory (name, parent_id, type, icon_name, color_hex, is_system, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?);

updateFinanceCategory:
UPDATE FinanceCategory
SET name = ?, parent_id = ?, type = ?, icon_name = ?, color_hex = ?, updated_at = ?
WHERE id = ?;

deleteFinanceCategory:
DELETE FROM FinanceCategory WHERE id = ?;

getFinanceCategoryById:
SELECT * FROM FinanceCategory WHERE id = ?;

getAllFinanceCategories:
SELECT * FROM FinanceCategory ORDER BY type, parent_id, name;

getFinanceCategoriesByType:
SELECT * FROM FinanceCategory WHERE type = ? ORDER BY parent_id, name;

getTopLevelFinanceCategories:
SELECT * FROM FinanceCategory WHERE parent_id IS NULL ORDER BY type, name;

getSubCategories:
SELECT * FROM FinanceCategory WHERE parent_id = ? ORDER BY name;

-- Queries for Transaction Groups
insertTransactionGroup:
INSERT INTO TransactionGroup (name, group_type, description, total_amount, status, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?);

updateTransactionGroup:
UPDATE TransactionGroup
SET name = ?, description = ?, status = ?, updated_at = ?
WHERE id = ?;

deleteTransactionGroup:
DELETE FROM TransactionGroup WHERE id = ?;

getTransactionGroupById:
SELECT * FROM TransactionGroup WHERE id = ?;

getAllTransactionGroups:
SELECT * FROM TransactionGroup ORDER BY created_at DESC;

getTransactionGroupsByType:
SELECT * FROM TransactionGroup WHERE group_type = ? ORDER BY created_at DESC;

-- Queries for Transaction Group Membership
addTransactionToGroup:
INSERT OR IGNORE INTO TransactionGroupMember (transaction_id, group_id) VALUES (?, ?);

removeTransactionFromGroup:
DELETE FROM TransactionGroupMember WHERE transaction_id = ? AND group_id = ?;

getGroupsForTransaction:
SELECT g.* FROM TransactionGroup g
INNER JOIN TransactionGroupMember m ON g.id = m.group_id
WHERE m.transaction_id = ?
ORDER BY g.created_at;

getTransactionsByGroup:
SELECT t.* FROM `Transaction` t
INNER JOIN TransactionGroupMember m ON t.id = m.transaction_id
WHERE m.group_id = ?
ORDER BY t.transaction_date;

-- Queries for Transactions
insertTransaction:
INSERT INTO `Transaction` (amount, debit_account_id, credit_account_id, transaction_date, transfer_group_id, category_id, payee, member, notes, state, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateTransaction:
UPDATE `Transaction`
SET amount = ?, debit_account_id = ?, credit_account_id = ?, transaction_date = ?, transfer_group_id = ?, category_id = ?, payee = ?, member = ?, notes = ?, state = ?, updated_at = ?
WHERE id = ?;

deleteTransaction:
DELETE FROM `Transaction` WHERE id = ?;

getTransactionById:
SELECT * FROM `Transaction` WHERE id = ?;

getAllTransactions:
SELECT * FROM `Transaction` ORDER BY transaction_date DESC, created_at DESC;

getTransactionsByAccount:
SELECT * FROM `Transaction`
WHERE debit_account_id = ? OR credit_account_id = ?
ORDER BY transaction_date DESC;

getTransactionsByCategory:
SELECT * FROM `Transaction` WHERE category_id = ? ORDER BY transaction_date DESC;

getTransactionsByDateRange:
SELECT * FROM `Transaction`
WHERE transaction_date BETWEEN ? AND ?
ORDER BY transaction_date DESC;

-- Removed: getTransactionsByType (no longer has type column)

getTransferPair:
SELECT * FROM `Transaction` WHERE transfer_group_id = ? ORDER BY created_at;

getPlannedTransactions:
SELECT * FROM `Transaction` WHERE state = 'planned' ORDER BY transaction_date;

getEstimatedTransactions:
SELECT * FROM `Transaction` WHERE state = 'estimated' ORDER BY transaction_date;

getTransactionsByState:
SELECT * FROM `Transaction` WHERE state = ? ORDER BY transaction_date;

updateTransactionState:
UPDATE `Transaction` SET state = ?, updated_at = ? WHERE id = ?;

-- Queries for Tags
insertFinanceTag:
INSERT INTO FinanceTag (name, color_hex, created_at)
VALUES (?, ?, ?);

updateFinanceTag:
UPDATE FinanceTag SET name = ?, color_hex = ? WHERE id = ?;

deleteFinanceTag:
DELETE FROM FinanceTag WHERE id = ?;

getFinanceTagById:
SELECT * FROM FinanceTag WHERE id = ?;

getAllFinanceTags:
SELECT * FROM FinanceTag ORDER BY name;

getFinanceTagByName:
SELECT * FROM FinanceTag WHERE name = ?;

-- Queries for Transaction-Tag associations
addTagToTransaction:
INSERT OR IGNORE INTO TransactionTag (transaction_id, tag_id) VALUES (?, ?);

removeTagFromTransaction:
DELETE FROM TransactionTag WHERE transaction_id = ? AND tag_id = ?;

getTagsForTransaction:
SELECT t.* FROM FinanceTag t
INNER JOIN TransactionTag tt ON t.id = tt.tag_id
WHERE tt.transaction_id = ?
ORDER BY t.name;

getTransactionsByTag:
SELECT ft.* FROM `Transaction` ft
INNER JOIN TransactionTag tt ON ft.id = tt.transaction_id
WHERE tt.tag_id = ?
ORDER BY ft.transaction_date DESC;

-- Queries for Attachments
insertAttachment:
INSERT INTO TransactionAttachment (transaction_id, file_path, file_type, created_at)
VALUES (?, ?, ?, ?);

deleteAttachment:
DELETE FROM TransactionAttachment WHERE id = ?;

getAttachmentsForTransaction:
SELECT * FROM TransactionAttachment WHERE transaction_id = ? ORDER BY created_at;

-- Queries for Linked Items
insertLinkedItem:
INSERT INTO TransactionLinkedItem (transaction_id, linked_item_id, linked_item_type, created_at)
VALUES (?, ?, ?, ?);

deleteLinkedItem:
DELETE FROM TransactionLinkedItem WHERE id = ?;

getLinkedItemsForTransaction:
SELECT * FROM TransactionLinkedItem WHERE transaction_id = ? ORDER BY created_at;

getTransactionsByLinkedItem:
SELECT ft.* FROM `Transaction` ft
INNER JOIN TransactionLinkedItem tli ON ft.id = tli.transaction_id
WHERE tli.linked_item_id = ? AND tli.linked_item_type = ?
ORDER BY ft.transaction_date DESC;

-- Note: Template and recurring transaction queries removed
-- Will be re-implemented after full migration to debit/credit model

-- Analytics Queries
getTotalBalanceAllAccounts:
SELECT SUM(current_balance) AS total FROM Account WHERE is_active = 1;

-- Note: Expense/Income sum queries now require joining with root account to determine type
-- These will be moved to repository layer for proper hierarchy traversal
getExpenseSumByCategory:
SELECT t.category_id, SUM(t.amount) AS total
FROM `Transaction` t
WHERE t.transaction_date BETWEEN ? AND ?
GROUP BY t.category_id;

getIncomeSumByCategory:
SELECT t.category_id, SUM(t.amount) AS total
FROM `Transaction` t
WHERE t.transaction_date BETWEEN ? AND ?
GROUP BY t.category_id;

getExpenseByDateRange:
SELECT SUM(t.amount) AS total
FROM `Transaction` t
WHERE t.transaction_date BETWEEN ? AND ?;

getIncomeByDateRange:
SELECT SUM(t.amount) AS total
FROM `Transaction` t
WHERE t.transaction_date BETWEEN ? AND ?;

getRecentPayees:
SELECT DISTINCT payee FROM `Transaction`
WHERE payee IS NOT NULL AND payee != ''
ORDER BY transaction_date DESC
LIMIT 20;
