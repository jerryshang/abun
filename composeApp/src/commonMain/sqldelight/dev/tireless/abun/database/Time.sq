-- Task table
CREATE TABLE task (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  description TEXT,
  parent_id INTEGER,
  strategy TEXT NOT NULL DEFAULT 'plan', -- plan, todo, do, check
  "constraint" TEXT NOT NULL DEFAULT 'exactly', -- exactly, not_before, not_after
  estimate_minutes INTEGER NOT NULL DEFAULT 45,
  planned_date TEXT,
  planned_start TEXT,
  state TEXT NOT NULL DEFAULT 'Ready',
  actual_minutes INTEGER,
  created_at INTEGER NOT NULL,
  updated_at INTEGER NOT NULL,
  FOREIGN KEY (parent_id) REFERENCES task (id) ON DELETE SET NULL
);

-- Timeblock table
CREATE TABLE timeblock (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  start_time TEXT NOT NULL, -- ISO timestamp
  end_time TEXT NOT NULL,   -- ISO timestamp
  task_id INTEGER NOT NULL,
  created_at INTEGER NOT NULL,
  updated_at INTEGER NOT NULL,
  FOREIGN KEY (task_id) REFERENCES task (id)
);

-- Task tags table
CREATE TABLE task_tag (
  task_id INTEGER NOT NULL,
  tag_id INTEGER NOT NULL,
  PRIMARY KEY (task_id, tag_id),
  FOREIGN KEY (task_id) REFERENCES task (id) ON DELETE CASCADE,
  FOREIGN KEY (tag_id) REFERENCES tag (id) ON DELETE CASCADE
);

-- Task logs table
CREATE TABLE task_log (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  task_id INTEGER NOT NULL,
  state_after TEXT NOT NULL,
  started_at TEXT NOT NULL,
  ended_at TEXT NOT NULL,
  actual_minutes INTEGER NOT NULL,
  note TEXT,
  created_at INTEGER NOT NULL,
  FOREIGN KEY (task_id) REFERENCES task (id) ON DELETE CASCADE
);

-- Alarm table
CREATE TABLE alarm (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  timeblock_id INTEGER NOT NULL,
  minutes_before INTEGER NOT NULL, -- Minutes before timeblock start
  is_enabled INTEGER NOT NULL DEFAULT 1, -- Boolean (0/1)
  created_at INTEGER NOT NULL,
  FOREIGN KEY (timeblock_id) REFERENCES timeblock (id) ON DELETE CASCADE
);

-- Task queries
selectAllTasks:
SELECT
  t.id,
  t.name,
  t.description,
  t.parent_id,
  t.strategy,
  t."constraint" AS constraint_value,
  t.created_at,
  t.updated_at,
  parent.name AS parent_name,
  parent.strategy AS parent_strategy
FROM task t
LEFT JOIN task parent ON t.parent_id = parent.id
ORDER BY t.name;

selectTaskById:
SELECT
  t.id,
  t.name,
  t.description,
  t.parent_id,
  t.strategy,
  t."constraint" AS constraint_value,
  t.created_at,
  t.updated_at,
  parent.name AS parent_name,
  parent.strategy AS parent_strategy
FROM task t
LEFT JOIN task parent ON t.parent_id = parent.id
WHERE t.id = ?;

selectTasksByParent:
SELECT
  t.id,
  t.name,
  t.description,
  t.parent_id,
  t.strategy,
  t."constraint" AS constraint_value,
  t.created_at,
  t.updated_at,
  parent.name AS parent_name,
  parent.strategy AS parent_strategy
FROM task t
LEFT JOIN task parent ON t.parent_id = parent.id
WHERE
  (:parentId IS NULL AND t.parent_id IS NULL)
  OR t.parent_id = :parentId
ORDER BY t.name;

selectTasksByStrategy:
SELECT
  t.id,
  t.name,
  t.description,
  t.parent_id,
  t.strategy,
  t."constraint" AS constraint_value,
  t.created_at,
  t.updated_at,
  parent.name AS parent_name,
  parent.strategy AS parent_strategy
FROM task t
LEFT JOIN task parent ON t.parent_id = parent.id
WHERE t.strategy = ?
ORDER BY t.name;

insertTask:
INSERT INTO task (name, description, parent_id, strategy, "constraint", created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?);

updateTask:
UPDATE task
SET name = ?, description = ?, parent_id = ?, strategy = ?, "constraint" = ?, updated_at = ?
WHERE id = ?;

deleteTask:
DELETE FROM task WHERE id = ?;

-- Timeblock queries
selectTimeblocksByDateRange:
SELECT
  tb.*,
  t.name AS task_name,
  t.description AS task_description,
  t.strategy AS task_strategy,
  parent.name AS parent_task_name,
  parent.strategy AS parent_task_strategy
FROM timeblock tb
JOIN task t ON tb.task_id = t.id
LEFT JOIN task parent ON t.parent_id = parent.id
WHERE datetime(tb.start_time) >= datetime(?)
  AND datetime(tb.start_time) <= datetime(?)
ORDER BY tb.start_time;

selectTimeblockById:
SELECT
  tb.*,
  t.name AS task_name,
  t.description AS task_description,
  t.strategy AS task_strategy,
  parent.name AS parent_task_name,
  parent.strategy AS parent_task_strategy
FROM timeblock tb
JOIN task t ON tb.task_id = t.id
LEFT JOIN task parent ON t.parent_id = parent.id
WHERE tb.id = ?;

insertTimeblock:
INSERT INTO timeblock (start_time, end_time, task_id, created_at, updated_at)
VALUES (?, ?, ?, ?, ?);

updateTimeblock:
UPDATE timeblock
SET start_time = ?, end_time = ?, task_id = ?, updated_at = ?
WHERE id = ?;

deleteTimeblock:
DELETE FROM timeblock WHERE id = ?;

-- Alarm queries
selectAlarmsByTimeblock:
SELECT * FROM alarm WHERE timeblock_id = ? ORDER BY minutes_before;

insertAlarm:
INSERT INTO alarm (timeblock_id, minutes_before, is_enabled, created_at)
VALUES (?, ?, ?, ?);

updateAlarm:
UPDATE alarm
SET minutes_before = ?, is_enabled = ?
WHERE id = ?;

deleteAlarm:
DELETE FROM alarm WHERE id = ?;

deleteAlarmsByTimeblock:
DELETE FROM alarm WHERE timeblock_id = ?;
